server.port=6000
spring.application.name=auth-application
# server.servlet.context-path=/auth
# 生效环境
spring.profiles.active=local,dev
# 注册中心
#spring.cloud.nacos.discovery.server-addr=localhost:8848
#spring.cloud.nacos.username=nacos
#spring.cloud.nacos.password=nacos
# 数据库
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/db_auth
spring.datasource.username=db_user_auth
spring.datasource.password=db_user_auth_password
#mybatis-plus 日志
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis-plus.mapper-locations=classpath*:mapper/*.xml
# 启用虚拟线程
spring.threads.virtual.enabled=true
# 自定义前后端分离前端登录页面地址
spring.security.oauth2.authorizationserver.custom.login.page.uri=http://127.0.0.1:5137
# 自定义允许跨域域名
spring.security.oauth2.authorizationserver.custom.cors.origin.allowed=http://127.0.0.1:5174,https://*.geek.cn:[*],https://*.geekim.cn:[*]
# OAuth2 端点配置
spring.security.oauth2.authorizationserver.issuer=http://192.168.XX.XXX:8080
#spring.security.oauth2.authorizationserver.endpoint.handler-path=/authorization
### 登录端点: 此端点链接到AuthorizationController#login() 接口地址
#spring.security.oauth2.authorizationserver.endpoint.login-processing-uri=${server.servlet.context-path}/${spring.security.oauth2.authorizationserver.endpoint.handler-path}/login
#spring.security.oauth2.authorizationserver.endpoint.authorization-uri=${server.servlet.context-path}/oauth2/authorize
#spring.security.oauth2.authorizationserver.endpoint.device-authorization-uri=${server.servlet.context-path}/oauth2/device_authorization
#spring.security.oauth2.authorizationserver.endpoint.device-verification-uri=${server.servlet.context-path}/oauth2/device_verification
#spring.security.oauth2.authorizationserver.endpoint.token-uri=${server.servlet.context-path}/oauth2/token
#spring.security.oauth2.authorizationserver.endpoint.jwk-set-uri=${server.servlet.context-path}/oauth2/jwks
#spring.security.oauth2.authorizationserver.endpoint.token-revocation-uri=${server.servlet.context-path}/oauth2/revoke
#spring.security.oauth2.authorizationserver.endpoint.token-introspection-uri=${server.servlet.context-path}/oauth2/introspect
#spring.security.oauth2.authorizationserver.endpoint.oidc.user-info-uri=${server.servlet.context-path}/userinfo
#spring.security.oauth2.authorizationserver.endpoint.oidc.logout-uri=${server.servlet.context-path}/connect/logout
#spring.security.oauth2.authorizationserver.endpoint.oidc.client-registration-uri=${server.servlet.context-path}/connect/register
# redis 配置
spring.data.redis.host=127.0.0.1
spring.data.redis.port=6379
spring.data.redis.password=
# OAuth2 Client客户端配置。自己的认证服务可以作为第三方联合认证的客户端使用
# 这个gitee就是registrationId
# 指定oauth登录提供者，该oauth登录由provider中的gitee来处理
spring.security.oauth2.client.registration.gitee.provider=gitee
# 客户端名字
spring.security.oauth2.client.registration.gitee.clientName=
# 认证方式:授权码模式
spring.security.oauth2.client.registration.gitee.authorizationGrantType=authorization_code
# 客户端id，使用自己的gitee客户端id
spring.security.oauth2.client.registration.gitee.clientId=
# 客户端密钥,使用自己gitee的客户端密钥
spring.security.oauth2.client.registration.gitee.clientSecret=
# 回调地址
spring.security.oauth2.client.registration.gitee.redirectUri=
# 申请的scope列表
spring.security.oauth2.client.registration.gitee.scope=
# github OAuth2授权登录
# spring security 默认实现了Github 提供的OAuth2 登录
spring.security.oauth2.client.registration.github.provider=github
spring.security.oauth2.client.registration.github.clientName=
# 客户端id，自己的Github客户端id
spring.security.oauth2.client.registration.github.clientId=
# 客户端密钥，自己的Github客户端密钥
spring.security.oauth2.client.registration.github.clientSecret=
# oauth 登录提供商
# 发起授权申请的地址
spring.security.oauth2.client.provider.gitee.authorizationUri=https://gitee.com/oauth/authorize
# 获取token的地址
spring.security.oauth2.client.provider.gitee.tokenUri=https://gitee.com/oauth/token
# 获取用户信息的地址
spring.security.oauth2.client.provider.gitee.userInfoUri=https://gitee.com/api/v5/user
# 设置用户信息响应体中账号的字段
spring.security.oauth2.client.provider.gitee.userNameAttribute=id





